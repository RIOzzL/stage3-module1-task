plugins {
    id 'java'
}

wrapper {
    gradleVersion = gradlewVersion
}

subprojects {
    apply plugin: 'application'
    apply plugin: 'java'
    apply plugin: 'jacoco'
    group = 'com.mjc.school'
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17

    repositories {
        mavenCentral()
    }

    dependencies {
        testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.1'
        testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.1'

        compileOnly 'org.projectlombok:lombok:1.18.26'
        annotationProcessor 'org.projectlombok:lombok:1.18.26'
    }

    test {
        useJUnitPlatform()
    }
}

task repack(type: Jar, dependsOn: ':module-main:build') {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    if (findProject(':module-main') != null) {
        entryCompression = ZipEntryCompression.STORED
        def buildJar = zipTree("${project(':module-main').buildDir}/libs/module-main.jar")
        from(buildJar) {
            into('/')
        }
        manifest {
            attributes(
                    'Main-Class': 'com.mjc.school.Main'
            )
        }
    }
    if (findProject(':module-repository') != null) {
        entryCompression = ZipEntryCompression.STORED
        def buildJar = zipTree("${project(':module-repository').buildDir}/libs/module-repository.jar")
        from(buildJar) {
            into('/')
        }
    }
    if (findProject(':module-service') != null) {
        entryCompression = ZipEntryCompression.STORED
        def buildJar = zipTree("${project(':module-service').buildDir}/libs/module-service.jar")
        from(buildJar) {
            into('/')
        }
    }
    if (findProject(':module-web') != null) {
        entryCompression = ZipEntryCompression.STORED
        def buildJar = zipTree("${project(':module-web').buildDir}/libs/module-web.jar")
        from(buildJar) {
            into('/')
        }
    }
}
